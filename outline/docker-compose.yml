networks:
  outline-network:
    external: true
  keycloak-network:
    external: true

volumes:
  minio-data:
  outline-postgres:
  outline-postgres-backup:
  outline-data-backups:
  outline-database-backups:

services:
  postgres-outline:
    image: ${OUTLINE_POSTGRES_IMAGE_TAG}
    container_name: postgres-outline
    volumes:
      - outline-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${OUTLINE_DB_NAME}
      POSTGRES_USER: ${OUTLINE_DB_USER}
      POSTGRES_PASSWORD: ${OUTLINE_DB_PASSWORD}
    networks:
      - outline-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${OUTLINE_DB_NAME}", "-U", "${OUTLINE_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  redis:
    image: ${OUTLINE_REDIS_IMAGE_TAG}
    container_name: redis-outline
    networks:
      - outline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  minio:
    image: ${OUTLINE_MINIO_IMAGE_TAG}
    container_name: minio-outline
    entrypoint: /bin/sh
    command:
      - -c
      - |
        minio server /data --console-address :9001 &
        sleep 20
        mc config host add minio http://localhost:9000 ${OUTLINE_MINIO_ADMIN} ${OUTLINE_MINIO_ADMIN_PASSWORD}
        mc mb minio/${OUTLINE_MINIO_BUCKET_NAME}
        mc admin user add minio ${OUTLINE_MINIO_USER} ${OUTLINE_MINIO_USER_PASSWORD}
        cat > outline-policy.json <<-EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetBucketLocation",
                  "s3:ListBucket",
                  "s3:ListBucketMultipartUploads"
                ],
                "Resource": [
                  "arn:aws:s3:::${OUTLINE_MINIO_BUCKET_NAME}"
                ]
              },
              {
                "Action": [
                  "s3:AbortMultipartUpload",
                  "s3:DeleteObject",
                  "s3:GetObject",
                  "s3:ListMultipartUploadParts",
                  "s3:PutObject",
                  "s3:GetObject"
                ],
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3:::${OUTLINE_MINIO_BUCKET_NAME}/*"
                ],
                "Sid": ""
              }
            ]
          }
        EOF
        cat > data-public.json <<-EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                "AWS": [
                  "*"
                ]
              },
                "Action": [
                  "s3:GetObject",
                  "s3:ListMultipartUploadParts"
                ],
                "Resource": [
                  "arn:aws:s3:::data/public/*"
                ]
              }
            ]
          }
        EOF
        mc anonymous set-json data-public.json minio/${OUTLINE_MINIO_BUCKET_NAME}
        mc admin policy create minio OutlineAppFullAccess outline-policy.json
        mc admin policy attach minio OutlineAppFullAccess --user=${OUTLINE_MINIO_USER}
        tail -f /dev/null
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${OUTLINE_MINIO_ADMIN}
      MINIO_ROOT_PASSWORD: ${OUTLINE_MINIO_ADMIN_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${OUTLINE_MINIO_CONSOLE_URL}
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - outline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  outline:
    image: ${OUTLINE_IMAGE_TAG} 
    container_name: outline
    environment:
      DATABASE_URL: postgres://${OUTLINE_DB_USER}:${OUTLINE_DB_PASSWORD}@postgres-outline:5432/${OUTLINE_DB_NAME}?sslmode=disable&connect_timeout=10
      PGSSLMODE: disable
      REDIS_URL: redis://redis:6379
      URL: ${OUTLINE_URL}
      PORT: 3000
      SECRET_KEY: ${OUTLINE_SECRET_KEY}
      UTILS_SECRET: ${OUTLINE_UTILS_SECRET}
      FORCE_HTTPS: 'false'
      ENABLE_UPDATES: 'true'
      AWS_REGION: eu-east-1
      AWS_ACCESS_KEY_ID: ${OUTLINE_MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${OUTLINE_MINIO_USER_PASSWORD}
      AWS_S3_UPLOAD_BUCKET_URL: ${OUTLINE_AWS_S3_UPLOAD_BUCKET_URL}
      AWS_S3_ACCELERATE_URL: ${OUTLINE_AWS_S3_UPLOAD_BUCKET_URL}
      AWS_S3_UPLOAD_BUCKET_NAME: ${OUTLINE_MINIO_BUCKET_NAME}
      FILE_STORAGE_UPLOAD_MAX_SIZE: ${FILE_STORAGE_UPLOAD_MAX_SIZE}
      AWS_S3_FORCE_PATH_STYLE: 'false'
      AWS_S3_ACL: private
      OIDC_CLIENT_ID: 'outline'
      OIDC_CLIENT_SECRET: ${OUTLINE_OIDC_CLIENT_SECRET}
      OIDC_AUTH_URI: ${OUTLINE_OIDC_AUTH_URI}
      OIDC_TOKEN_URI: ${OUTLINE_OIDC_TOKEN_URI}
      OIDC_USERINFO_URI: ${OUTLINE_OIDC_USERINFO_URI}
      OIDC_DISPLAY_NAME: ${OUTLINE_OIDC_DISPLAY_NAME}
      OIDC_USERNAME_CLAIM: ${OUTLINE_OIDC_USERNAME_CLAIM}
      OIDC_SCOPES: ${OUTLINE_OIDC_SCOPES}
      DEFAULT_LANGUAGE: ${OUTLINE_DEFAULT_LANGUAGE}
    networks:
      - outline-network
      - keycloak-network
    extra_hosts:
      - "${OUTLINE_OIDC_HOSTNAME}:${OUTLINE_OIDC_DOCKER_GATEWAY}"
      - "${OUTLINE_HOSTNAME}:${OUTLINE_OIDC_DOCKER_GATEWAY}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      postgres-outline:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  backups-outline:
    image: ${OUTLINE_POSTGRES_IMAGE_TAG}
    container_name: backups-outline
    command: >-
      sh -c 'sleep $OUTLINE_BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h postgres-outline -p 5432 -d $OUTLINE_DB_NAME -U $OUTLINE_DB_USER | gzip > $OUTLINE_POSTGRES_BACKUPS_PATH/$OUTLINE_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        tar -zcpf $OUTLINE_DATA_BACKUPS_PATH/$OUTLINE_DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $OUTLINE_DATA_PATH &&
        find $OUTLINE_POSTGRES_BACKUPS_PATH -type f -mtime +$OUTLINE_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $OUTLINE_DATA_BACKUPS_PATH -type f -mtime +$OUTLINE_DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $OUTLINE_BACKUP_INTERVAL; done'
    volumes:
      - outline-postgres-backup:/var/lib/postgresql/data
      - minio-data:${OUTLINE_DATA_PATH}
      - outline-data-backups:${OUTLINE_DATA_BACKUPS_PATH}
      - outline-database-backups:${OUTLINE_POSTGRES_BACKUPS_PATH}
    environment:
      OUTLINE_DB_NAME: ${OUTLINE_DB_NAME}
      OUTLINE_DB_USER: ${OUTLINE_DB_USER}
      PGPASSWORD: ${OUTLINE_DB_PASSWORD}
      OUTLINE_BACKUP_INIT_SLEEP: ${OUTLINE_BACKUP_INIT_SLEEP}
      OUTLINE_BACKUP_INTERVAL: ${OUTLINE_BACKUP_INTERVAL}
      OUTLINE_POSTGRES_BACKUP_PRUNE_DAYS: ${OUTLINE_POSTGRES_BACKUP_PRUNE_DAYS}
      OUTLINE_DATA_BACKUP_PRUNE_DAYS: ${OUTLINE_DATA_BACKUP_PRUNE_DAYS}
      OUTLINE_POSTGRES_BACKUPS_PATH: ${OUTLINE_POSTGRES_BACKUPS_PATH}
      OUTLINE_DATA_BACKUPS_PATH: ${OUTLINE_DATA_BACKUPS_PATH}
      OUTLINE_DATA_PATH: ${OUTLINE_DATA_PATH}
      OUTLINE_POSTGRES_BACKUP_NAME: ${OUTLINE_POSTGRES_BACKUP_NAME}
      OUTLINE_DATA_BACKUP_NAME: ${OUTLINE_DATA_BACKUP_NAME}
    networks:
      - outline-network
    restart: unless-stopped
    depends_on:
      postgres-outline:
        condition: service_healthy
